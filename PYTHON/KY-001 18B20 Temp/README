
![cooltext399335322948702](https://user-images.githubusercontent.com/84939760/144688840-36fd0fd0-7520-4ec9-832f-42d9a91aba05.png)


# Datos técnicos 
### Descripción.

El módulo de sensor de temperatura para Arduino Keyes KY-001 permite la medición de la temperatura ambiente entregando datos mediante un bus serie digital.

#### Imagen 2. Sensor
![KY-001](https://user-images.githubusercontent.com/84939760/144689319-44c2afce-084f-49cd-ad2e-e952edb6968b.png)

## Especificaciones.

Fabricante: Dallas 18B20
Voltaje de funcionamiento : 3V a 5.5V
Rango de medición de temperatura: -55 ° C a 125 ° C
Rango de precisión de medición: ± 0.5 ° C
Dimensiones: 18.5mm x 15mm
Resolución en Modo Termómetro : 9 a 12 bits
Interfaz: 1-Wire (OneWire)
Peso: 2 gr
Pines: GND, VCC y Señal

#### Imagen 2. Pines del sensor
![image](https://user-images.githubusercontent.com/84939760/144693689-b554dc31-3c78-4b22-bbac-46e9f54e507b.png)

## Circuito.
Ya que este sensor es "simple" por decirlo de alguna forma, su implementación también es simple.
En este caso se puede conectar a un Arduino los conectores de energía y el puerto DATA a una conexión digital.

Materiales:
- KY-001 18B20
- Arduino

Si bien en la imagen 3 se muestra un protoboard no es necesario.

#### Imagen 3. Circuito en Tinkercad
![image](https://user-images.githubusercontent.com/84939760/144695219-109fa0bd-8e0f-42b6-8593-4372684578ee.png)

# Codigo

```python
import os
import glob
import time
 
os.system('modprobe w1-gpio')
os.system('modprobe w1-therm')
 
base_dir = '/sys/bus/w1/devices/'
device_folder = glob.glob(base_dir + '28*')[0]
device_file = device_folder + '/w1_slave'
 
def read_temp_raw():
    f = open(device_file, 'r')
    lines = f.readlines()
    f.close()
    return lines
 
def read_temp():
    lines = read_temp_raw()
    while lines[0].strip()[-3:] != 'YES':
        time.sleep(0.2)
        lines = read_temp_raw()
    equals_pos = lines[1].find('t=')
    if equals_pos != -1:
        temp_string = lines[1][equals_pos+2:]
        temp_c = float(temp_string) / 1000.0
        temp_f = temp_c * 9.0 / 5.0 + 32.0
        return temp_c, temp_f
	
while True:
	print(read_temp())	
	time.sleep(1)
```
